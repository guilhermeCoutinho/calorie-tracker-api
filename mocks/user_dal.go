// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/guilhermeCoutinho/api-studies/dal (interfaces: UserDAL)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dal "github.com/guilhermeCoutinho/api-studies/dal"
	models "github.com/guilhermeCoutinho/api-studies/models"
	reflect "reflect"
)

// MockUserDAL is a mock of UserDAL interface
type MockUserDAL struct {
	ctrl     *gomock.Controller
	recorder *MockUserDALMockRecorder
}

// MockUserDALMockRecorder is the mock recorder for MockUserDAL
type MockUserDALMockRecorder struct {
	mock *MockUserDAL
}

// NewMockUserDAL creates a new mock instance
func NewMockUserDAL(ctrl *gomock.Controller) *MockUserDAL {
	mock := &MockUserDAL{ctrl: ctrl}
	mock.recorder = &MockUserDALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDAL) EXPECT() *MockUserDALMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method
func (m *MockUserDAL) DeleteUser(arg0 context.Context, arg1 uuid.UUID, arg2 models.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserDALMockRecorder) DeleteUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDAL)(nil).DeleteUser), arg0, arg1, arg2)
}

// GetUser mocks base method
func (m *MockUserDAL) GetUser(arg0 context.Context, arg1 string, arg2 *dal.QueryOptions) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserDALMockRecorder) GetUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDAL)(nil).GetUser), arg0, arg1, arg2)
}

// GetUsers mocks base method
func (m *MockUserDAL) GetUsers(arg0 context.Context, arg1 *uuid.UUID, arg2 *dal.QueryOptions) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockUserDALMockRecorder) GetUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserDAL)(nil).GetUsers), arg0, arg1, arg2)
}

// InsertUser mocks base method
func (m *MockUserDAL) InsertUser(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserDALMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDAL)(nil).InsertUser), arg0, arg1)
}

// UpsertUser mocks base method
func (m *MockUserDAL) UpsertUser(arg0 context.Context, arg1 *models.User, arg2 models.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser
func (mr *MockUserDALMockRecorder) UpsertUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserDAL)(nil).UpsertUser), arg0, arg1, arg2)
}
